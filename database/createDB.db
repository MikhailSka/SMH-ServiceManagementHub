CREATE TABLE IF NOT EXISTS device
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    active BOOL NOT NULL,
    name VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
CONSTRAINT device_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS operator
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    active BOOL NOT NULL,
    name VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
CONSTRAINT operatort_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS unit
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    active BOOL NOT NULL,
    name VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
	serial_number VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
	product_code VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
	location_id UUID NOT NULL,
    device_id UUID NOT NULL, 
	operator_id uuid NOT NULL,
	description VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
    FOREIGN KEY (location_id) REFERENCES location (id);
	CONSTRAINT unit_pkey PRIMARY KEY (id),
	CONSTRAINT fk_device FOREIGN KEY (device_id) REFERENCES device (id),
	CONSTRAINT fk_operator FOREIGN KEY (operator_id) REFERENCES operator (id)
);

CREATE TABLE IF NOT EXISTS location
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    active BOOL NOT NULL,
    name VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    customer_id UUID NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
	CONSTRAINT location_pkey PRIMARY KEY (id)
    FOREIGN KEY (customer_id) REFERENCES customer (id)

);
CREATE TABLE IF NOT EXISTS customer
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    active BOOL NOT NULL,
    name VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
	nip VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
	CONSTRAINT customer_pkey PRIMARY KEY (id)
	
);

CREATE TABLE unit_history (
  id UUID NOT NULL DEFAULT gen_random_uuid(),
  unit_id UUID NOT NULL,
  location_id UUID NOT NULL,
  user_id UUID NOT NULL,
  creation_date TIMESTAMP,
  FOREIGN KEY (unit_id) REFERENCES unit (id),
  FOREIGN KEY (location_id) REFERENCES location (id),
  FOREIGN KEY (user_id) REFERENCES "user" (id)
);


CREATE TABLE IF NOT EXISTS "user"
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    active BOOL NOT NULL,
    email VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    password VARCHAR(128) COLLATE pg_catalog.default NOT NULL,
    admin BOOL NOT NULL,
    name VARCHAR(128) COLLATE pg_catalog.default,
    image_path VARCHAR(256) DEFAULT NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
    CONSTRAINT user_pkey PRIMARY KEY (id)    
);

CREATE TABLE IF NOT EXISTS posts
(
    id UUID NOT NULL DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL,
    title VARCHAR(256) COLLATE pg_catalog.default NOT NULL,
    content TEXT COLLATE pg_catalog.default NOT NULL,
    creation_date timestamp NOT NULL,
    modification_date timestamp,
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT fk_user FOREIGN KEY (user_id) REFERENCES "user" (id)
);


-- Alter posts.title column
ALTER TABLE posts
ALTER COLUMN title TYPE VARCHAR(128) COLLATE pg_catalog.default;

-- Alter posts.content column
ALTER TABLE posts
ALTER COLUMN content TYPE VARCHAR(256) COLLATE pg_catalog.default;

-- Alter unit.description column
ALTER TABLE unit
ALTER COLUMN description TYPE VARCHAR(256) COLLATE pg_catalog.default;

-- Alter user.image_path column (change type)
ALTER TABLE "user"
ALTER COLUMN image_path TYPE TEXT;

-- Alter user.image_path column (set default value)
ALTER TABLE "user"
ALTER COLUMN image_path SET DEFAULT NULL;

-- Rename user.image_path column
ALTER TABLE "user"
RENAME COLUMN image_path TO image;

ALTER TABLE "location"
ALTER COLUMN customer_id SET DEFAULT NULL;